// ENUMS
enum CoffeeSpecies {
  ARABICA
  ROBUSTA
  LIBERICA
  EXCELSA
}

enum RoastLevel {
  LIGHT
  MEDIUM
  DARK
}

enum ProcessingMethod {
  WASHED
  NATURAL
  HONEY
  DECAF
}

enum BrewingMethod {
  ESPRESSO
  DRIP
  FRENCH_PRESS
  COLD_BREW
  MOKA_POT
  AEROPRESS
  TURKISH
}

enum Certification {
  ORGANIC
  FAIR_TRADE
  RAINFOREST_ALLIANCE
  DIRECT_TRADE
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  orders    Order[]
  createdAt DateTime @default(now())
}

model Product {
  id             String           @id @default(uuid())
  name           String
  description    String?
  price          Float
  species        CoffeeSpecies
  roastLevel     RoastLevel
  processing     ProcessingMethod
  certifications Certification[]
  originId       String
  origin         Origin           @relation(fields: [originId], references: [id])
  grindType      String? // e.g. whole bean, ground, capsule
  brewing        BrewingMethod[]
  orders         Order[]
  createdAt      DateTime         @default(now())
}

model Equipment {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String // e.g. grinder, espresso machine
  price       Float
  createdAt   DateTime @default(now())
}

model Accessory {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String // e.g. cup, mug, tamper
  price       Float
  createdAt   DateTime @default(now())
}

model Additive {
  id        String   @id @default(uuid())
  name      String
  type      String // e.g. sugar, syrup, milk
  createdAt DateTime @default(now())
}

model Origin {
  id       String    @id @default(uuid())
  country  String
  region   String?
  farm     String?
  products Product[]
}

model Order {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(0)
  status    String   @default("pending")
  createdAt DateTime @default(now())
}
